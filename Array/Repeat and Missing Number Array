// @interviewBit : Repeat and Missing Number Array  
// same question @leetcode : Set Mismatch

//---------------------------------------------------------------OPTIMAL----------------------------------------------------------------
// using basic maths

vector<int> Solution::repeatedNumber(const vector<int> &nums) {
    
        long long n = nums.size();
        long long s = 0;
        long long s2 = 0;

        for(int i=0; i<n; i++){
            s += nums[i];
            s2 += (long long)nums[i]*(long long)nums[i];
        }

        long long sn = (n*(n+1))/2;
        long long s2n = (n*(n+1)*(2*n+1))/6;

        long long val1 =  s-sn;
        long long val2 = (s2 - s2n)/val1;

        int repeat = (val1 + val2)/2;
        int missing = val2-repeat;

        return {repeat,missing};
    
}

//---------------------------------------------------------------OPTIMAL--------------------------------------------------------------
// using XOR

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {

        int n = nums.size();
        int xorSum = 0;

        for( int i=0 ;i<n; i++)
            xorSum = xorSum^nums[i]^(i+1);
        
        int res = xorSum&(~(xorSum-1));
        int res1 = 0, res2 =0;

        for( int i=0; i<n; i++){
            if( res&nums[i] )       res1 ^= nums[i];
            else                    res2 ^= nums[i];

            if( res&(i+1) )         res1 ^= (i+1);
            else                    res2 ^= (i+1);
        }

        int count = 0;
        for(int i=0; i<n; i++)
            if(res1==nums[i])           count++;
        
        if(count==0)
            return {res2, res1};

        return {res1,res2};

    }
};

//------------------------------------------------------------------------------------------------------------------------------------
