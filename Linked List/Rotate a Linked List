// @leetcode : Rotate List

//---------------------------------------------------------NAIVE----------------------------------------------------------------

 to do

//---------------------------------------------------------OPTIMAL---------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {

        // edge cases
        if(head==NULL || head->next==NULL || k==0)                  return head;
        
        // compute the length
        int len = 1;
        ListNode* temp = head;

        while(temp->next!=NULL){
            len++;
            temp = temp->next;
        }
        
        temp->next = head;
        k = k % len;
        k = len - k;

        // go till (length-k)th node
        ListNode* cur = head;
        k--;
        while(k){
            cur = cur->next;
            k--;
        } 

        // make head node and break connection
        head = cur->next;
        cur->next = NULL;

        return head;

    }
};

//-------------------------------------------------------------------------------------------------------------------------------
