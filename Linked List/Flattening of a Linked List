// @gfg : Flattening a Linked List

//----------------------------------------------------------OPTIMAL----------------------------------------------------------------

/* Node structure  used in the program

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */
    
Node* mergeTwoLists( Node* list1, Node* list2) {

        Node* l1 = list1;
        Node* l2 = list2;
    
        if(l1==NULL)                return l2;
        if(l2==NULL)                return l1;

        if(l1->data > l2->data )       swap(l1,l2);
        Node* res = l1;

        while(l1!=NULL && l2!=NULL){

            Node* temp = NULL;
            while( l1!=NULL && l1->data <= l2->data ){
                temp = l1;
                l1 = l1->bottom;
            }

            temp->bottom = l2;
            swap(l1,l2);

        }

        return res;

    }
    
Node *flatten(Node *root)
{
   if(root==NULL || root->next==NULL )              return root;
   
   Node* temp = root;

   while( temp!=NULL &&  temp->next!=NULL){
       
       Node* temp2 = temp->next->next;
       temp = mergeTwoLists( temp, temp->next);
       temp->next = temp2;
   }
   
   return temp;
   
}

//--------------------------------------------------------------------------------------------------------------------------------
