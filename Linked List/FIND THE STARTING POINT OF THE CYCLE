// @ leetcode : Linked List Cycle II

//------------------------------------------------------NAIVE APPROACH-----------------------------------------------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {

        if(head==NULL || head->next==NULL)              return NULL;

        unordered_set<ListNode*> s;

        ListNode* temp = head;
        while(temp!=NULL){

            if(s.find(temp)!= s.end())              return temp;

            s.insert(temp);
            temp = temp->next;
        }

        return NULL;
        
    }
};

//--------------------------------------------------------OPTIMAL---------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {

        if(head==NULL || head->next==NULL)                          return NULL;

        ListNode* slow = head, *fast = head, *dummy = head;

        while(fast!=NULL && fast->next!=NULL){     

            slow = slow->next;
            fast = fast->next->next;

            if(slow==fast){

                while(dummy!=slow){
                    slow = slow->next;
                    dummy = dummy->next;
                }

                return dummy;
            }
        }

        return NULL;
        
    }
};

//--------------------------------------------------------------------------------------------------------------------------------
