// @leetcode : Find Median from Data Stream

//---------------------------------------------------------NAIVE APPROACH---------------------------------------------------------------

//-----------------------------------------------------------OPTIMAL-------------------------------------------------------------------

class MedianFinder {
public:
 
    priority_queue<int> maxpq;                                      // max heap
    priority_queue< int, vector<int>, greater<int> > minpq;         // min heap

    void addNum(int num) {

        // first element of stream, always go to maxHeap
        if( maxpq.size()==0 || maxpq.top() > num){
            maxpq.push(num);
        }

        else{
            minpq.push(num);
        }

        // if maxHeap contains, more than 1 element than minHeap
        if( maxpq.size() > minpq.size() + 1 ){
            minpq.push(maxpq.top());
            maxpq.pop();
        }

        // if minHeap contains , more than 1 element than maxHeap
        else if( minpq.size() > maxpq.size() + 1){
            maxpq.push(minpq.top());
            minpq.pop();
        }

    }
    
    double findMedian() {

        if(maxpq.size()==minpq.size())
            return (maxpq.top() + minpq.top()) / 2.0;
        
        else if( maxpq.size() > minpq.size())
            return maxpq.top();
        
        else 
            return minpq.top();
        
    }
    
};

//-------------------------------------------------------------------------------------------------------------------------------------
