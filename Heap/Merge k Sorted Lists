// @leetcode : Merge k Sorted Lists

//-----------------------------------------------------------------BRUTE FORCE APPROACH 1------------------------------------------------------------------
// TC-> O( (n*k)*log(k*n) )
// k is no. of lists, n is average numbers of node present in each list 
// SC -> O(n*k + n*k), for heap and creating new linked list

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {

        if (lists.empty())
            return NULL;

        priority_queue<int, vector<int>, greater<int>> pq;

        for (auto List : lists) {

            ListNode* curr = List;
            while (curr != NULL) {
                pq.push(curr->val);
                curr = curr->next;
            }
        }

        ListNode* head = new ListNode();
        ListNode* curr = head;
        while (!pq.empty()) {

            int x = pq.top();
            pq.pop();
            ListNode* temp = new ListNode(x);
            curr->next = temp;
            curr = curr->next;
        }

        return head->next;
    }
};

//--------------------------------------------------------------------BETTER APPRAOCH--------------------------------------------------------------------
// using merge function
// TC -> O(N*k*k), SC-> O(1)

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        ListNode* small = list1;
        ListNode* big = list2;

        if (small == NULL)
            return big;
        if (big == NULL)
            return small;

        if (small->val >= big->val)
            swap(small, big);

        ListNode* head = small;

        while (small != NULL && big != NULL) {
            ListNode* temp;
            while (small != NULL && small->val <= big->val) {
                temp = small;
                small = small->next;
            }

            temp->next = big;
            swap(small, big);
        }

        return head;
    }

public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {

        if (lists.empty())
            return NULL;

        ListNode* head = lists[0];
        for (int i = 1; i < lists.size(); i++) {
            head = mergeTwoLists(head, lists[i]);
        }

        return head;
    }
};

//-----------------------------------------------------------------OPTIMAL APPROACH 2-------------------------------------------------------------------
// TC -> O((k*n)*logk) 
// k is no. of lists, n is average numbers of node present in each list 
// SC -> O(k) , for heap

public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {

        if (lists.empty())
            return NULL;

        priority_queue<pair<int, ListNode*>, vector<pair<int, ListNode*>>,
                       greater<pair<int, ListNode*>>>
            pq;

        for (auto list : lists) {
            if (list != NULL)
                pq.push({list->val, list});
        }

        ListNode* head = new ListNode();
        ListNode* curr = head;

        while (!pq.empty()) {

            int x = pq.top().first;
            ListNode* l = pq.top().second;
            pq.pop();

            curr->next = l;
            curr = curr->next;

            if (l->next != NULL) {
                pq.push({l->next->val, l->next});
            }
        }

        return head->next;
    }
};

//-----------------------------------------------------------------------------------------------------------------------------------------------------
