// DP 45 : Longest String Chain
// @leetcode  : Longest String Chain

//----------------------------------------------------------ALGO-------------------------------------------------------------

class Solution {
public:
    static bool comp(string &s1, string &s2){
        return s1.size() < s2.size();
    }
public: 
    bool isPossible( string &s1, string &s2){   

        if( s1.size() != s2.size() +1)              return false;

        int i=0;            // points at s1 (larger string)
        int j=0;            // points at s2 (smaller string)
        while(i<s1.size()){
            if( s1[i]==s2[j] && j<s2.size() ){
                i++;
                j++;
            }

            else{
                i++;
            }
        }

        if(i==s1.size() && j== s2.size())           return true;

        return false;
    }

public:
    int longestStrChain(vector<string>& words) {

        int n = words.size();
        vector<int> dp(n,1);
        int maxi = 0;

        sort(words.begin(), words.end(), comp);

        for(int i=0;i<n; i++){
            for(int j=0; j<i; j++){

                if( isPossible(words[i],words[j]) && 1 + dp[j] > dp[i])
                    dp[i] = 1 + dp[j];
                
            }

            if(dp[i] > maxi)
                maxi = dp[i];
            
        }
        
        return maxi;
    }
};

//----------------------------------------------------------------------------------------------------------------------------
