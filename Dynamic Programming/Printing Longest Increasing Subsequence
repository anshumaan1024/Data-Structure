// DP 42 : Printing Longest Increasing Subsequence
// @gfg - Printing Longest Increasing Subsequence

//-------------------------------------------------------ALGO----------------------------------------------------------------

class Solution {
  public:
    vector<int> longestIncreasingSubsequence(int n, vector<int>& nums) {
        
        vector<int> dp(n,1);
        vector<int> hash(n);

        int maxi = 1;
        int lastIndex =0;
        
        for(int ind=0; ind<n; ind++){
            
            hash[ind]= ind;

            for(int prevInd = 0; prevInd<ind; prevInd++){
                
                if( nums[ind] > nums[prevInd] && 1 + dp[prevInd] > dp[ind]){
                    
                    dp[ind] = 1 + dp[prevInd];
                    hash[ind] = prevInd;
                }
                 
            }
            
            if(dp[ind] > maxi){
                maxi = dp[ind];
                lastIndex = ind;
            }
             
        } 
        
        vector<int> ans;
        ans.push_back(nums[lastIndex]);
        while( hash[lastIndex]!= lastIndex ){
            
            lastIndex = hash[lastIndex];
            ans.push_back(nums[lastIndex]);
            
        }

        reverse(ans.begin(),ans.end());
    
        return ans;
     
    }
};

//--------------------------------------------------------------------------------------------------------------------------
