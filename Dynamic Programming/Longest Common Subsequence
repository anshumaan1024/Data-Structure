// DP 25 : Longest Common Subsequence
// @leetcode
// question number : 1143
// question name : Longest Common Subsequence

//----------------------------------------------------RECURSION-----------------------------------------------------------------

class Solution {
public:
    int f(int i, int j, string &text1, string &text2){

        if( i<0 || j <0 )
            return 0;

        if(text1[i]==text2[j])
            return 1 + f(i-1, j-1, text1, text2);
        
        return  0 + max( f(i-1, j, text1, text2), f(i,j-1, text1, text2) );

    }

public:
    int longestCommonSubsequence(string text1, string text2) {

        int n = text1.size();
        int m = text2.size();

        return f(n-1,m-1,text1,text2);
        
    }
};

//----------------------------------------------------------MEMOIZATION-------------------------------------------------------------

class Solution {
public:
    int f(int i, int j, string &text1, string &text2, vector<vector<int>> &dp){

        if( i<0 || j <0 )
            return 0;
        
        if(dp[i][j]!= -1)                   return dp[i][j];

        if(text1[i]==text2[j])
            return dp[i][j] = 1 + f(i-1, j-1, text1, text2,dp);
        
        return  dp[i][j] = 0 + max( f(i-1,j,text1,text2,dp), f(i,j-1,text1,text2,dp) );

    }

public:
    int longestCommonSubsequence(string text1, string text2) {

        int n = text1.size();
        int m = text2.size();

        vector<vector<int>> dp(n, vector<int> (m,-1));
        return f(n-1,m-1,text1,text2,dp);
        
    }
};

//------------------------------------------------------TABULATION----------------------------------------------------------------------

