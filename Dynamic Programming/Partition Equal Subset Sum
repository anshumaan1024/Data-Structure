// DP 15 : Partition Equal Subset Sum
// @leetcode
// question number : 416
// question name : Partition Equal Subset Sum

//--------------------------------------------------RECURSION----------------------------------------------------------------------

class Solution {
public:
    bool f(int ind, int target, vector<int>& nums){

        if( target ==0 )        return true;
        if( ind==0 )            return nums[0]==target;

        bool notTake = f(ind-1, target, nums);
        bool take = false;
        if( nums[ind] <= target )
            take = f(ind-1, target-nums[ind], nums);

        return  take || notTake;
    }

public:
    bool canPartition(vector<int>& nums) {

        int n = nums.size();
        
        int totSum  = 0;
        for(int i=0; i<n; i++)
            totSum += nums[i];
        
        if(totSum%2==1)     return false;              

        int target = totSum / 2;
        return f( n-1, target, nums);
        
    }
};

//---------------------------------------------------MEMOIZATION----------------------------------------------------------------

class Solution {
public:
    bool f(int ind, int target, vector<int>& nums, vector<vector<int>> &dp){

        if( target ==0 )        return true;
        if( ind==0 )            return nums[0]==target;

        if(dp[ind][target]!= -1)            return dp[ind][target];

        bool notTake = f(ind-1, target, nums,dp);
        bool take = false;
        if( nums[ind] <= target )
            take = f(ind-1, target-nums[ind], nums, dp);

        return  dp[ind][target] = take || notTake;
    }

public:
    bool canPartition(vector<int>& nums) {

        int n = nums.size();

        int totSum  = 0;
        for(int i=0; i<n; i++)
            totSum += nums[i];
        
        if(totSum%2==1)     return false;              

        int target = totSum / 2;
        vector<vector<int>> dp(n, vector<int> (target+1,-1));
        return f( n-1, target, nums,dp);
        
    }
};

//---------------------------------------------------------TABULATION-----------------------------------------------------

class Solution {
public:
    bool canPartition(vector<int>& nums) {

        int n = nums.size();

        int totSum  = 0;
        for(int i=0; i<n; i++)
            totSum += nums[i];
        
        if(totSum%2==1)     return false;              

        int target = totSum / 2;
        vector<vector<bool>> dp(n, vector<bool> (target+1,false));

        // base case 1
        for(int i=0; i<n; i++)
            dp[i][0] = true;

        // base case 2
        if(nums[0] <= target)
            dp[0][nums[0]] = true;
        
        for(int ind =1; ind<n; ind++ ){
            for(int T=1; T<=target; T++){

                bool notTake = dp[ind-1][T];
                bool take = false;
                if( nums[ind] <= T )
                    take = dp[ind-1][T-nums[ind]];

                dp[ind][T] = take || notTake;

            }
        }

        return dp[n-1][target];
        
    }
};
