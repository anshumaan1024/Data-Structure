// DP 50 : Minimum Cost to Cut the Stick
// @leetcode : Minimum Cost to Cut the Stick

//-----------------------------------------------------------RECURSION------------------------------------------------------------------

class Solution {
public: 
    int  f( int i, int j, vector<int> &cuts){

        if(i>j)                         return 0;

        int mini = 1e9;
        for(int ind=i; ind<=j; ind++){
            int cost = (cuts[j+1] - cuts[i-1]) + f(i,ind-1,cuts) + f(ind+1,j,cuts);
            
            mini = min(mini, cost);
        }

        return mini;
    }

public:
    int minCost(int n, vector<int>& cuts) {

        cuts.push_back(0);
        cuts.push_back(n);
    
        sort(cuts.begin(), cuts.end());

        int N = cuts.size();
        return f(1,N,cuts);
        
    }
};

//-------------------------------------------------------MEMOIZATION-------------------------------------------------------------

//------------------------------------------------------TABULATION---------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------------
