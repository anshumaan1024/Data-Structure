// DP 40 : Buy and Sell Stocks With Transaction Fee
// @leetcode : Best Time to Buy and Sell Stock with Transaction Fee

//--------------------------------------------------RECURSION----------------------------------------------------------------------

class Solution {
public:
    int f(int ind, bool buy, int fee, vector<int> &prices){

        if(ind==prices.size())              return 0;

        int profit = 0;
        if(buy){
            profit = max( -prices[ind] + f(ind+1,0,fee,prices),
                                     0 + f(ind+1,1,fee,prices) );
        }

        else{
            profit = max( prices[ind] - fee + f(ind+1,1,fee,prices),
                                        0 +  f(ind+1,0,fee,prices) );
        }

        return profit;
    }

public:
    int maxProfit(vector<int>& prices, int fee) {

        return f(0,1,fee,prices);        // f(0th index, 1 means buy,fee,prices[])
        
    }
};

//--------------------------------------------------MEMOIZATION---------------------------------------------------------------------

class Solution {
public:
    int f(int ind, bool buy, int fee, vector<int> &prices, vector<vector<int>> &dp){

        if(ind==prices.size())              return 0;
        if(dp[ind][buy]!= -1)               return dp[ind][buy];

        int profit = 0;
        if(buy){
            profit = max( -prices[ind] + f(ind+1,0,fee,prices,dp),
                                     0 + f(ind+1,1,fee,prices,dp) );
        }

        else{
            profit = max( prices[ind] - fee + f(ind+1,1,fee,prices,dp),
                                        0 +  f(ind+1,0,fee,prices,dp) );
        }

        return dp[ind][buy] = profit;
    }

public:
    int maxProfit(vector<int>& prices, int fee) {

        int n = prices.size();
        vector<vector<int>> dp(n, vector<int> (2,-1) );

        return f(0,1,fee,prices,dp);      // f(0th index,1 mean buy,fee,prices[],dp[][])
        
    }
};

//-------------------------------------------------TABULATION---------------------------------------------------------------------

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {

        int n = prices.size();
        vector<vector<int>> dp(n+1, vector<int> (2,0) );

        for(int ind=n-1; ind>=0; ind--){
            for(int buy = 0; buy<=1; buy++){
                
                int profit = 0;
                    if(buy){
                        profit = max( -prices[ind] + dp[ind+1][0],
                                                0 + dp[ind+1][1] );
                    }

                    else{
                        profit = max( prices[ind] - fee + dp[ind+1][1],
                                                    0 +  dp[ind+1][0]  );
                    }

                    dp[ind][buy] = profit;
            }
        }

        return dp[0][1];   // dp[0 th index][1 mean buy] 
        
    }
};

//--------------------------------------------------------------------------------------------------------------------------------
