// DP 29 : Longest Palindromic Subsequence
// @leetcode - Longest Palindromic Subsequence

//--------------------------------------------------TABULATION----------------------------------------------------------------------

class Solution {
public:
    int lcs(int i, int j, string &s1, string &s2, vector<vector<int>> &dp){

        int n = s1.size();
        int m = s2.size();

        for(int i=0; i<=n; i++)             // base case
            dp[i][0] = 0;
        
        for(int j=0; j<=m ;j++)             // base case
            dp[0][j] = 0;

        for(int i=1; i<=n; i++){ 
            for(int j=1; j<=m ;j++){
                if(s1[i-1]==s2[j-1])
                    dp[i][j] =  1 + dp[i-1][j-1];
                else
                    dp[i][j] = max( dp[i-1][j], dp[i][j-1] );
            }
        }

        return dp[n][m];
    }

public:
    int longestPalindromeSubseq(string s) {

        string s2 = s;
        reverse(s2.begin(), s2.end());

        int n = s.size();
        int m = s2.size();

        vector<vector<int>> dp(n+1, vector<int> (m+1,0));
        return lcs(n-1,m-1,s,s2,dp);
        
    }
};

//------------------------------------------------------------------------------------------------------------------------------
