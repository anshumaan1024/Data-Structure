// DP 53 : Palindrome Partitioning II
// @leetcode : Palindrome Partitioning II

//------------------------------------------------------RECURSION-----------------------------------------------------------------

class Solution {
public:
    bool isPalindrome(int i, int j, string &s){

        while(i<j){
            if(s[i]!= s[j])                 return false;
            i++;
            j--;
        }

        return true;
    }

public:
    int f(int i, int n, string &s){

        if(i==s.size())                     return 0;

        int minCuts = INT_MAX;
        for(int j=i; j<n; j++){

            if(isPalindrome(i,j,s)){
                int cuts = 1 + f(j+1,n,s);
                minCuts = min( minCuts, cuts); 
            }
        }

        return minCuts;
    }

public:
    int minCut(string s) {

        int n = s.size();
        return f(0,n,s)-1;        // -1 becoz it does partition after end of string also
        
    }
};

//------------------------------------------------------MEMOIZATION---------------------------------------------------------------

class Solution {
public:
    bool isPalindrome(int i, int j, string &s){

        while(i<j){
            if(s[i]!= s[j])                 return false;
            i++;
            j--;
        }

        return true;
    }

public:
    int f(int i, int n, string &s, vector<int> &dp){

        if(i==s.size())                     return 0;

        if(dp[i]!= -1)                      return dp[i];

        int minCuts = INT_MAX;
        for(int j=i; j<n; j++){

            if(isPalindrome(i,j,s)){
                int cuts = 1 + f(j+1,n,s,dp);
                minCuts = min( minCuts, cuts); 
            }
        }

        return dp[i] = minCuts;
    }

public:
    int minCut(string s) {

        int n = s.size();
        vector<int> dp(n,-1);
        return f(0,n,s,dp)-1;      // -1 becoz it does partition after end of string also
        
    }
};

//-------------------------------------------------------TABULATION--------------------------------------------------------------

class Solution {
public:
    bool isPalindrome(int i, int j, string &s){

        while(i<j){
            if(s[i]!= s[j])                 return false;
            i++;
            j--;
        }

        return true;
    }
    
public:
    int minCut(string s) {

        int n = s.size();
        vector<int> dp(n+1,0);

        dp[n] = 0;              // base case

        for(int i=n-1; i>=0; i--){

            int minCuts = INT_MAX;
            for(int j=i; j<n; j++){

                if(isPalindrome(i,j,s)){
                    int cuts = 1 + dp[j+1]; 
                    minCuts = min( minCuts, cuts); 
                }
            }

            dp[i] = minCuts;

        }

        return dp[0]-1;      // -1 becoz it does partition after end of string also
        
    }
};

//-------------------------------------------------------------------------------------------------------------------------------
