// DP 27 : Longest Common Substring
// @ GFG - Longest Common Substring
// similar question : @leetcode - Maximum Length of Repeated Subarray

//---------------------------------------------------RECURSION-----------------------------------------------------------------

class Solution{
    public:
    int  f(int i, int j, string &s1, string &s2, int &ans){
        
        if( i<0 || j<0)             return 0;
        
        int match=0;
        
        if(s1[i]==s2[j]){
            match = 1 + f(i-1,j-1,s1,s2,ans);
            ans = max(ans, match);
        }
        
        int temp1 = f(i-1,j,s1,s2,ans);
        int temp2 = f(i,j-1,s1,s2,ans);
        
        return match;
    }
    
    public:
    int longestCommonSubstr (string s1, string s2, int n, int m)
    {
        int ans=0;
        f(n-1,m-1,s1,s2,ans);
        return ans;
        
    }
};

//--------------------------------------------------MEMOIZATION----------------------------------------------------------------

class Solution{
    public:
    int f(int i, int j, string& s1, string& s2, vector<vector<int>>& dp) {
        
        if ( i== 0 || j== 0)               return 0;
    
        if (dp[i][j] != -1)                 return dp[i][j];
    
        int result = 0;
        if (s1[i-1] == s2[j-1]) 
            result = 1 + f(i-1, j-1, s1 ,s2, dp);
    
        else 
            result = 0;

        return dp[i][j] = result;
    
    }
    
    public:
        int longestCommonSubstr (string s1, string s2, int n, int m)
    {
            
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        int ans = 0;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                    f(i, j, s1, s2, dp);
                    ans = max(ans, dp[i][j]);
            }
        }

        return ans;
        
    }
};

//--------------------------------------------------TABULATION------------------------------------------------------------------

class Solution{
    public:
        int longestCommonSubstr (string s1, string s2, int n, int m)
    {
        
        vector<vector<int>> dp(n+1, vector<int> (m+1,0));
        int ans = 0;
        
        for(int i=1; i<=n; i++ ){
            for(int j=1; j<=m; j++){
                
                if( s1[i-1]==s2[j-1] ){
                    dp[i][j] = 1 + dp[i-1][j-1];
                    ans = max(ans, dp[i][j]);
                }
                
                else
                    dp[i][j] = 0;
            }
        }
        
        return ans;
    }
};

//------------------------------------------------------------------------------------------------------------------------------------
