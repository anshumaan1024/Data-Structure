//DP 26 : Print Longest Common Subsequence
// @  leetcode [There is no specfic problem of this question]
// question name : Longest Common Subsequence [working of code can be checked, here!!]

//---------------------------------------------USING-TABULATION-TO-CREATE-THE-TABLE-----------------------------------------------

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {

        // creating the dp[][] table using tabulation
        
        int n = text1.size();
        int m = text2.size();

        vector<vector<int>> dp(n+1, vector<int> (m+1,0));        // shifting of indexes   

        // base case 
        for(int i=0; i<=n ;i++) 
            dp[i][0] = 0;

        // base case
        for(int j=0; j<=m ;j++)
            dp[0][j] = 0;

        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){

                if(text1[i-1]==text2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                
                else
                    dp[i][j] = 0 + max( dp[i-1][j] , dp[i][j-1] );
            }
        }

        // printing LCS
        
        int i=n;
        int j=m;

        int length = dp[n][m];
        string s(length,'$');
        int ind = length-1;

        while(i>0 && j>0){

            if(text1[i-1]==text2[j-1]){
                s[ind] = text1[i-1];
                ind--;
                i--;
                j--;
            }

            else if( dp[i][j-1] > dp[i-1][j] )
                j--;
            
            else
                i--;
        }

        return s.length();
          
    }
};

//------------------------------------------------------------------------------------------------------------------------
