// DP 52 : Evaluate Boolean Expression to True
// @gfg : Boolean Parenthesization

//------------------------------------------------------RECURSION------------------------------------------------------------

class Solution{
public:
    int mod = 1003;
    int f(int i, int j, bool isTrue, string &s){
        
        if(i>j)                         return 0;                   // base case 1
        
        if(i==j){                                                   // base case 2
            if(isTrue==1)               return s[i]=='T';
            else                        return s[i]=='F';
        }
        
        int ways = 0;
        for(int ind=i+1; ind<=j-1; ind=ind+2){
            
            int LT = f(i,ind-1,1,s);
            int LF = f(i,ind-1,0,s);
            int RT = f(ind+1,j,1,s);
            int RF = f(ind+1,j,0,s);
            
            if( s[ind]=='&'){
                
                if(isTrue)          ways = ( ways + (LT*RT) )%mod;
                else                ways = ( ways + (LT*RF)%mod + (RT*LF)%mod + (LF*RF)%mod )%mod;
            }
            
            else if( s[ind]=='|'){
                
                if(isTrue)          ways = ( ways + (LT*RF)%mod + (LT*RT)%mod + (RT*LF)%mod )%mod;
                else                ways = ( ways + (LF*RF)%mod )%mod;
            }
            
            else{          // XOR
                
                if(isTrue)          ways = ( ways +(LT*RF)%mod + (RT*LF)%mod )%mod;
                else                ways = ( ways + (LT*RT)%mod + (LF*RF)%mod )%mod;
            }
            
        }
        
        return ways;
        
    } 
    
public:
    int countWays(int N, string s){
        
        return f(0,N-1,1,s);
        
    }
};

//----------------------------------------------------MEMOIZATION------------------------------------------------------------

class Solution{
public:
    int mod = 1003;
    int f(int i, int j, bool isTrue, string &s, vector<vector<vector<int>>> &dp ){
        
        if(i>j)                         return 0;                   // base case 1
        
        if(dp[i][j][isTrue]!= -1)       return dp[i][j][isTrue];
        
        if(i==j){                                                   // base case 2
            if(isTrue==1)               return s[i]=='T';
            else                        return s[i]=='F';
        }
        
        int ways = 0;
        for(int ind=i+1; ind<=j-1; ind=ind+2){
            
            int LT = f(i,ind-1,1,s,dp);
            int LF = f(i,ind-1,0,s,dp);
            int RT = f(ind+1,j,1,s,dp);
            int RF = f(ind+1,j,0,s,dp);
            
            if( s[ind]=='&'){
                
                if(isTrue)          ways = ( ways + (LT*RT) )%mod;
                else                ways = ( ways + (LT*RF)%mod + (RT*LF)%mod + (LF*RF)%mod )%mod;
            }
            
            else if( s[ind]=='|'){
                
                if(isTrue)          ways = ( ways + (LT*RF)%mod + (LT*RT)%mod + (RT*LF)%mod )%mod;
                else                ways = ( ways + (LF*RF)%mod )%mod;
            }
            
            else{          // XOR
                
                if(isTrue)          ways = ( ways +(LT*RF)%mod + (RT*LF)%mod )%mod;
                else                ways = ( ways + (LT*RT)%mod + (LF*RF)%mod )%mod;
            }
            
        }
        
        return dp[i][j][isTrue] = ways;
        
    } 
    
public:
    int countWays(int N, string s){
        
        vector<vector<vector<int>>> dp(N, vector<vector<int>> (N, vector<int> (2,-1)));
        return f(0,N-1,1,s,dp);
        
    }
};

//------------------------------------------------------TABULATION------------------------------------------------------------
