// DP 16 : Partition A Set Into Two Subsets With Minimum Absolute Sum Difference
// @GFG
// question name : Minimum sum partition

//-------------------------------------------------------TABULATION-----------------------------------------------------

class Solution{

  public:
	int minDifference(int arr[], int n)  { 
	    
	    int totSum = 0;
	    for(int i=0; i<n; i++)
	        totSum += arr[i];
	       
	    int k = totSum;
	    
	    vector<vector<bool>> dp(n, vector<bool> (k+1,false));
	    
	    // base case 1
	    for(int i=0; i<n; i++)
	        dp[i][0] = true;
	    
	    // base case 2
	    if(arr[0]<=k)
	        dp[0][arr[0]] = true;
	    
	    for(int ind =1; ind<n; ind++){
	        for(int T = 1; T<=k; T++){
	            
	            bool notTake = dp[ind-1][T];
	            bool take = false;
	                if(arr[ind] <= T)
	                  take = dp[ind-1][T-arr[ind]];
	            
	            dp[ind][T] = take || notTake;
	        }
	    }

      // Traversing dp[n-1][col->0,1,2,...totSum];
	    int ans = INT_MAX;
	    for(int j=0; j<=k ; j++){
	        if(dp[n-1][j]==true){
	            int s1 = j;
	            int s2 = totSum - j;
	            ans = min(ans,abs(s1-s2));
	        }
	    }
	    
	    return ans;
	    
	} 
};
