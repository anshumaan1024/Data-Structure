// DP 17 : Counts Subsets with Sum K 
// @GFG
// question name : Perfect Sum Problem (includes Zero also)

//------------------------------------------------RECURSION---------------------------------------------------------

class Solution{
    public:
        int f(int ind, int sum, int arr[]){
            
            if( ind ==0)
            {
                if( sum==0 && arr[0]==0 )         return 2;
                if( arr[0]==sum || sum ==0 )        return 1;
                else                                return 0;
            }
            
            int notPick = f(ind-1,sum,arr);
            int pick = 0;
            
            if(arr[ind]<=sum)
                pick = f(ind-1,sum-arr[ind],arr);
            
            return pick + notPick;
        }

	public:
	    int perfectSum(int arr[], int n, int sum)
	{
        return f(n-1,sum,arr);
	}
	  
};

//---------------------------------------------------------MEMOIZATION---------------------------------------------------------------

class Solution{
    public:
        int f(int ind, int sum, int arr[],vector<vector<int>> &dp){
            
            if( ind ==0)
            {
                if( sum==0 && arr[0]==0 )         return 2;
                if( arr[0]==sum || sum ==0 )        return 1;
                else                                return 0;
            }
            
            if(dp[ind][sum]!= -1)                   return dp[ind][sum];
            
            int notPick = f(ind-1,sum,arr,dp);
            int pick = 0;
            
            if(arr[ind]<=sum)
                pick = f(ind-1,sum-arr[ind],arr,dp);
            
            return dp[ind][sum] = (pick + notPick)%(1000000000+7);
        }

	public:
	    int perfectSum(int arr[], int n, int sum)
	{
	    vector<vector<int>> dp(n, vector<int> (sum+1,-1));
        return f(n-1,sum,arr,dp);
	}
	  
};

//-------------------------------------------------------TABULATION----------------------------------------------------------	

class Solution{
    int mod = (int)(1e9 +7);
	public:
	    int perfectSum(int arr[], int n, int sum)
	{
	    vector<vector<int>> dp(n, vector<int> (sum+1,0));
	    
            
        if(arr[0]==0)           dp[0][0] = 2;
        else                    dp[0][0] = 1;
            
        if(arr[0]!=0 && arr[0]<=sum )
            dp[0][arr[0]] = 1;	  
            
        for(int ind =1; ind<n; ind++){
            for(int s =0; s<=sum; s++){
            
                int notPick = dp[ind-1][s]; 
                int pick = 0;
                
                if(arr[ind]<=s)
                    pick = dp[ind-1][s-arr[ind]]; 
                
                dp[ind][s] = (pick + notPick)%mod;                
                
            }
        }
        
        return dp[n-1][sum];
            
	}
	  
};


