// DP 39 : Buy and Sell Stocks With Cooldown
// @leetcode -  Best Time to Buy and Sell Stock with Cooldown

//-----------------------------------------------------RECURSION-------------------------------------------------------------

class Solution {
public:
    int f(int ind, bool buy, vector<int> &prices){

        if(ind>=prices.size())                  return 0;

        int profit = 0;
        if(buy==1){
            profit =  max( -prices[ind] + f(ind+1,0,prices),
                                    0 + f(ind+1,1,prices));
        }

        else{
            profit =  max( prices[ind] + f(ind+2,1,prices),
                                0 + f(ind+1,0,prices) );
        }

        return profit;
    }

public:
    int maxProfit(vector<int>& prices) {

        return f(0,1,prices);   
    }
};

//----------------------------------------------------MEMOIZATION---------------------------------------------------------

class Solution {
public:
    int f(int ind, bool buy, vector<int> &prices, vector<vector<int>> &dp){

        if(ind>=prices.size())                  return 0;

        if(dp[ind][buy]!= -1)                   return dp[ind][buy];        

        int profit = 0;
        if(buy==1){
            profit =  max( -prices[ind] + f(ind+1,0,prices,dp),
                                    0 + f(ind+1,1,prices,dp));
        }

        else{
            profit =  max( prices[ind] + f(ind+2,1,prices,dp),
                                0 + f(ind+1,0,prices,dp) );
        }

        return dp[ind][buy] = profit;
    }

public:
    int maxProfit(vector<int>& prices) {

        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(2,-1));

        return f(0,1,prices,dp);   
    }
};

//----------------------------------------------------TABULATION------------------------------------------------------------

class Solution {
public:
    int maxProfit(vector<int>& prices) {

        int n = prices.size();
        vector<vector<int>> dp(n+2, vector<int>(2,0));

        for(int ind=n-1; ind>=0; ind--){
            for(int buy=0; buy<=1; buy++){
                
                int profit=0;
                if(buy==1){
                    profit =  max( -prices[ind] + dp[ind+1][0], 
                                              0 + dp[ind+1][1] );
                }

                else{
                    profit =  max( prices[ind] + dp[ind+2][1], 
                                            0 + dp[ind+1][0] );
                }

                dp[ind][buy] = profit;

            }
        }

        return dp[0][1];    
    }
};

//-----------------------------------------------------------------------------------------------------------------------
