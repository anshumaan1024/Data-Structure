// DP 46 : Longest Bitonic subsequence
// @gfg - Longest Bitonic subsequence

//--------------------------------------------------------ALGO------------------------------------------------------------

class Solution{
	public:
	int LongestBitonicSequence(vector<int>nums)
	{
	    int n = nums.size();
        vector<int> dp1(n,1);

        for(int ind=0; ind<n; ind++){
            for(int prevInd = 0; prevInd<ind; prevInd++){
                
                if(nums[ind] > nums[prevInd])
                    dp1[ind] = max( dp1[ind], 1 + dp1[prevInd] );
            }
        } 
        
        vector<int> dp2(n,1);
        for(int ind=n-1; ind>=0; ind--){
            for(int prevInd = n-1; prevInd > ind; prevInd--){
                
                if(nums[ind] > nums[prevInd])
                    dp2[ind] = max( dp2[ind], 1 + dp2[prevInd] );
            }
        } 
        
        int maxi = 0;
        for(int i=0; i<n; i++){
            maxi = max( maxi, dp1[i] + dp2[i] -1);
        }
        
        return maxi;
     
	}
};

//-------------------------------------------------------------------------------------------------------------------------
