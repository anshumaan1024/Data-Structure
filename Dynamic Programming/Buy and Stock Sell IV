// DP 38 : Buy and Stock Sell IV
// @leetcode - Best Time to Buy and Sell Stock IV

//-------------------------------------------------------RECURSION----------------------------------------------------------------

class Solution {
public:
    int f(int ind, int tranNo, int k, vector<int> &prices){

        if(tranNo==2*k || ind== prices.size())         return 0;

        int profit = 0;
        if(tranNo%2==0){    // buy
            profit = max( -prices[ind] + f(ind+1,tranNo+1,k,prices),   // buy
                                    0 +  f(ind+1,tranNo,k, prices) );  // buy another day
        }

        else{               //sell
            profit = max( prices[ind]  +  f(ind+1,tranNo+1,k,prices),    // sell
                                    0 + f(ind+1,tranNo,k,prices)     );  // sell another day
        }

        return profit;
    }
    
public:
    int maxProfit(int k, vector<int>& prices) {
        
        return f(0,0,k,prices);

    }
};

//----------------------------------------------------MEMOIZATION-------------------------------------------------------------

class Solution {
public:
    int f(int ind, int tranNo, int k, vector<int> &prices,vector<vector<int>> &dp){

        if(tranNo==2*k || ind== prices.size())          return 0;

        if(dp[ind][tranNo]!= -1)                        return dp[ind][tranNo];

        int profit = 0;
        if(tranNo%2==0){    // buy
            profit = max( -prices[ind] + f(ind+1,tranNo+1,k,prices,dp),
                                    0 +  f(ind+1,tranNo,k, prices,dp) );
        }

        else{               //sell
            profit = max( prices[ind]  +  f(ind+1,tranNo+1,k,prices,dp),
                                    0 + f(ind+1,tranNo,k,prices,dp)     );
        }

        return dp[ind][tranNo] = profit;
    }
    
public:
    int maxProfit(int k, vector<int>& prices) {

        int n = prices.size();
        vector<vector<int>> dp(n, vector<int> (2*k,-1));
        
        return f(0,0,k,prices,dp);

    }
};

//---------------------------------------------------TABULATION----------------------------------------------------------------

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {

        int n = prices.size();
        vector<vector<int>> dp(n+1, vector<int> (2*k+1,0));

        for(int ind=n-1; ind>=0; ind--){
            for(int tranNo = 2*k-1; tranNo>=0; tranNo--){

                int profit = 0;
                if(tranNo%2==0){    // buy
                    profit = max( -prices[ind] + dp[ind+1][tranNo+1] ,
                                            0 +  dp[ind+1][tranNo]  );
                }

                else{               //sell
                    profit = max( prices[ind]  +  dp[ind+1][tranNo+1],
                                            0 + dp[ind+1][tranNo]    );
                }
                
                dp[ind][tranNo] = profit;
            }
        }
        
        return dp[0][0]; 

    }
};

//------------------------------------------------SPACE OPTIMIZATION----------------------------------------------------------

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {

        int n = prices.size();
        vector<int> after(2*k+1,0);
        vector<int> curr(2*k+1,0);

        for(int ind=n-1; ind>=0; ind--){
            for(int tranNo = 2*k-1; tranNo>=0; tranNo--){

                int profit = 0;
                if(tranNo%2==0){    // buy
                    profit = max( -prices[ind] + after[tranNo+1] ,
                                            0 +  after[tranNo]  );
                }

                else{               //sell
                    profit = max( prices[ind]  + after[tranNo+1],
                                            0 + after[tranNo]    );
                }
                
                curr[tranNo] = profit;
            }
            after = curr;
        }
        
        return after[0]; 

    }
};

//---------------------------------------------------------------------------------------------------------------------------
