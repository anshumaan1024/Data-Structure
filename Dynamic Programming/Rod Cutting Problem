// DP 24 - Rod Cutting Problem
// @GFG
// question name : Rod Cutting

//-----------------------------------------------------RECURSION--------------------------------------------------------------------------

class Solution{
    public:
        int f(int ind, int N, int price[]){
            
            if(ind==0){
                return N*price[0];
            }
            
            int notTake =  0 + f(ind-1,N,price);
            int take = INT_MIN;
            
            int rodLength = ind+1;
            if(rodLength<=N)
                take = price[ind]  + f(ind,N-rodLength,price);
            
            return max(take,notTake);
            
        }
    
    public:
        int cutRod(int price[], int N) {
        
        int n = N;
        return f(n-1,N,price);
    }
};

//--------------------------------------------------MEMOIZATION---------------------------------------------------------------------

class Solution{
    public:
        int f(int ind, int N, int price[], vector<vector<int>> &dp){
            
            if(ind==0){
                return N*price[0];
            }
            
            if(dp[ind][N]!= -1)                     return dp[ind][N];
            
            int notTake =  0 + f(ind-1,N,price,dp);
            int take = INT_MIN;
            
            int rodLength = ind+1;
            if(rodLength<=N)
                take = price[ind]  + f(ind,N-rodLength,price,dp);
            
            return dp[ind][N] =  max(take,notTake);
            
        }
    
    public:
        int cutRod(int price[], int N) {
        
        int n = N;
        vector<vector<int>> dp(n, vector<int> (N+1,-1));
        return f(n-1,N,price,dp);
    }
};

//----------------------------------------------------TABULATION---------------------------------------------------------------

class Solution{
    public:
        int cutRod(int price[], int N) {
        
        int n = N;
        vector<vector<int>> dp(n, vector<int> (N+1,0));
        
        // base case
        for(int n=0; n<=N; n++)
            dp[0][n] = n*price[0];
        
        for(int ind=1; ind<n; ind++){
            for(int n = 0; n<=N; n++){
                
                int notTake =  0 + dp[ind-1][n];  
                int take = INT_MIN;
                
                int rodLength = ind+1;
                if(rodLength<=n)
                    take = price[ind]  + dp[ind][n-rodLength];      
                
                dp[ind][n] =  max(take,notTake);  
            }
        }
        return dp[n-1][N];     
    }
};

//------------------------------------------------------------------------------------------------------------------------------------
