// DP 18 : Count Partitions With Given Difference
// @GFG
// question name : Partitions with Given Difference

//---------------------------------------------------------RECURSION-----------------------------------------------------------

class Solution {
    int mod = (int)(1e9+7);
    public:
        int f(int ind, int target, vector<int> &arr){
            
            if(ind==0){
                if(arr[0]==0 && target ==0)                 return 2;
                if(target ==0 || target==arr[0])            return 1;
                else                                        return 0;
            }
            
            int notPick = f(ind-1,target,arr);
            int pick = 0;
                if(arr[ind]<=target)
                    pick = f(ind-1,target-arr[ind],arr);
            
            return  (pick+notPick)%mod;
        }
        
    public:
        int countPartitions(int n, int d, vector<int>& arr) {
        
            int totSum = 0;
            for(int i=0; i<n; i++)
                totSum += arr[i];
            
            if( totSum-d <0 || (totSum-d)%2==1 )
                return 0;
            
            int target = (totSum-d)/2;
            
            return f(n-1,target,arr);
    }
};

//--------------------------------------------------MEMOIZATION-----------------------------------------------------------

class Solution {
    int mod = (int)(1e9+7);
    public:
        int f(int ind, int target, vector<int> &arr, vector<vector<int>> &dp){
            
            if(ind==0){
                if(arr[0]==0 && target ==0)                 return 2;
                if(target ==0 || target==arr[0])            return 1;
                else                                        return 0;
            }
            
            if(dp[ind][target]!= -1)                        return dp[ind][target];
            
            int notPick = f(ind-1,target,arr,dp);
            int pick = 0;
                if(arr[ind]<=target)
                    pick = f(ind-1,target-arr[ind],arr,dp);
            
            return dp[ind][target] = (pick+notPick)%mod;
        }
        
    public:
        int countPartitions(int n, int d, vector<int>& arr) {
        
            int totSum = 0;
            for(int i=0; i<n; i++)
                totSum += arr[i];
            
            if( totSum-d <0 || (totSum-d)%2==1 )
                return 0;
            
            int target = (totSum-d)/2;
            
            vector<vector<int>> dp(n, vector<int> (target+1,-1));
            
            return f(n-1,target,arr,dp);
    }
};

//--------------------------------------------------TABULATION-------------------------------------------------------------

class Solution {
    int mod = (int)(1e9+7);
    public:
        int countPartitions(int n, int d, vector<int>& arr) {
        
            int totSum = 0;
            for(int i=0; i<n; i++)
                totSum += arr[i];
            
            if( totSum-d <0 || (totSum-d)%2==1 )
                return 0;
            
            int target = (totSum-d)/2;
            
            vector<vector<int>> dp(n, vector<int> (target+1,0));
            
            if(arr[0]==0)           dp[0][0]=2;                 // base case
            else                    dp[0][0]=1;                 // base case
            
            if(arr[0]!=0 && arr[0]<=target)                     // base case
                dp[0][arr[0]] = 1;
            
            for(int ind=1; ind<n; ind++){
                for(int T=0; T<=target; T++){
                    
                    int notPick = dp[ind-1][T]; 
                    int pick = 0;
                        if(arr[ind]<=T)
                            pick = dp[ind-1][T-arr[ind]];
                    
                    dp[ind][T] = (pick+notPick)%mod;
                    
                }
            }
            
            return dp[n-1][target];
    }
};
