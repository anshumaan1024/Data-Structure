// DP 36 : Buy and Sell Stock - II
// @leetcode : Best Time to Buy and Sell Stock II

//------------------------------------------------------GREEDY------------------------------------------------------------------

class Solution {
public:
    int maxProfit(vector<int>& prices) {

        int n = prices.size();
        int profit = 0;

        for(int i=1; i<n; i++){
            if(prices[i] > prices[i-1])
                profit += prices[i] - prices[i-1];

        }

        return profit;
        
    }
};

//----------------------------------------------------RECURSION----------------------------------------------------------

class Solution {
public:
    int f(int ind, bool buy, vector<int> &prices){

        if( ind==prices.size())
            return 0;
        
        int profit = 0;
        if(buy){
            profit = max( -prices[ind] + f(ind+1,0,prices),             // take
                                     0 +  f(ind+1,1,prices));          // not take
        }

        else{
            profit = max( prices[ind] + f(ind+1,1,prices),             // sell
                                    0 + f(ind+1,0,prices));            // not sell
        }

        return profit;
    }

public:
    int maxProfit(vector<int>& prices) {
        
        return f(0,1,prices);
    }
};

//-------------------------------------------------MEMOIZATION---------------------------------------------------------

class Solution {
public:
    int f(int ind, bool buy, vector<int> &prices, vector<vector<int>> &dp){

        if( ind==prices.size())
            return 0;

        if(dp[ind][buy]!= -1)               return dp[ind][buy];
        
        int profit = 0;
        if(buy){
            profit = max( -prices[ind] + f(ind+1,0,prices,dp),             // take
                                     0 +  f(ind+1,1,prices,dp));          // not take
        }

        else{
            profit = max( prices[ind] + f(ind+1,1,prices,dp),             // sell
                                    0 + f(ind+1,0,prices,dp));            // not sell
        }

        return dp[ind][buy] = profit;
    }

public:
    int maxProfit(vector<int>& prices) {
        
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int> (2,-1));
        return f(0,1,prices,dp);
    }
};

//--------------------------------------------------------TABULATION------------------------------------------------------

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int n = prices.size();
        vector<vector<int>> dp(n+1, vector<int> (2,0));

        dp[n][0] = dp[n][1] = 0;
        for(int ind=n-1; ind>=0; ind--){
            for(int buy=0; buy<=1; buy++){
        
                int profit = 0;
                if(buy){
                    profit = max( -prices[ind] + dp[ind+1][0] ,             // take
                                            0 +  dp[ind+1][1] );          // not take
                }

                else{
                    profit = max( prices[ind] + dp[ind+1][1],             // sell
                                            0 + dp[ind+1][0] );            // not sell
                }

                dp[ind][buy] = profit;
            }
        }

        return dp[0][1]; 
    }
};

//---------------------------------------------------SPACE OPTIMIZATION-----------------------------------------------

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int n = prices.size();
        vector<int> prev(2,0), curr(2,0);

        prev[0] = prev[1] = 0;
        for(int ind=n-1; ind>=0; ind--){
            for(int buy=0; buy<=1; buy++){
        
                int profit = 0;
                if(buy){
                    profit = max( -prices[ind] + prev[0] ,             // take
                                            0 +  prev[1] );          // not take
                }

                else{
                    profit = max( prices[ind] +prev[1],             // sell
                                            0 + prev[0] );            // not sell
                }

                curr[buy] = profit;
            }
            prev= curr;
        }

        return prev[1]; 
    }
};

//------------------------------------------------------------------------------------------------------------------------
