// @leetcode : LRU Cache

//---------------------------------------------------------------------------------------------------------------------------------------

class LRUCache {
public:

    // class for doubly linked list
    class node{
    public:

        int key;
        int val;
        node* next;
        node* prev;

        node(int _key, int _value){
            key = _key;
            val = _value;
        }
    };

    node* head = new node(0,0);
    node* tail = new node(0,0);
    int cap;
    unordered_map<int,node*> m;

    LRUCache(int capacity) {

        cap = capacity;
        head->next = tail;
        tail->prev = head;
        
    }
    
    void addnode(node* newnode){

        node* temp = head->next;

        head->next = newnode;
        temp->prev = newnode;

        newnode->next = temp;
        newnode->prev = head;

    }

    void deletenode(node* delnode){

        node* delprev = delnode->prev;
        node* delnext = delnode->next;

        delprev->next = delnext;
        delnext->prev = delprev;

    }

    int get(int key) {

        if(m.find(key)!=m.end()){

            node* resnode = m[key];
            int res = resnode->val;
            m.erase(key);
            deletenode(resnode);
            addnode(resnode);
            m[key]  = head->next;
            
            return res;
        }

        return -1;

    }
    
    void put(int key, int value) {

        // key exist in hashtable
        if(m.find(key)!=m.end()){
            node* existingnode = m[key];
            m.erase(key);
            deletenode(existingnode);
        }

        // if capacity is full
        if( m.size()== cap){
            m.erase(tail->prev->key);
            deletenode(tail->prev);

        }

        addnode(new node(key,value));
        m[key] = head->next;
        
    }
};

//---------------------------------------------------------------------------------------------------------------------------------------
