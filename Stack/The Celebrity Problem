// @gfg : The Celebrity Problem

//--------------------------------------------------------------NAIVE-------------------------------------------------------------------



//--------------------------------------------------------------OPTIMAL-----------------------------------------------------------------

class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        stack<int> st;
        for(int i=0; i<n; i++)
            st.push(i);
        
        while(st.size()!=1){
            
            int A = st.top();
            st.pop();
            
            int B = st.top();
            st.pop();
            
            if(M[A][B]==1){
                // discard A
                st.push(B);
            }
            
            else{
                // discard B
                st.push(A);
            }
            
        }
        
        int candidate = st.top();

        // In celebrity rows -> all values should zero
        int zeroCount = 0;
        for(int j=0; j<n; j++){
            if(M[candidate][j] == 0 )        zeroCount++;                
        }
            
        if(zeroCount!=n)
            return -1;
            
        // In celebrity column, every value should be 1 (except diagonal)
        int oneCount = 0;
        for(int i=0; i<n; i++){
            if( M[i][candidate]==1)         oneCount++;
        }
            
        if(oneCount!=n-1)
            return -1;
        
        return candidate;
        
    }
};

//--------------------------------------------------------------------------------------------------------------------------------------
