// @leetcode : Min Stack

//--------------------------------------------------------------NAIVE----------------------------------------------------------------------
// using stack of pair , with (val,min)

//-------------------------------------------------------------OPTIMAL--------------------------------------------------------------------

class MinStack {
public:
    stack<long long> st;
    long long mini;
    MinStack() {
        mini = INT_MAX;
    }
    
    void push(int val) {

        if(st.empty()){
            st.push(val);
            mini = val;
        }

        else{
            if( mini < val ){
                st.push(val);
            }

            else{
                // this type conversion is imp
                st.push( 2*long(val) - mini );
                mini = val;
            }
        }
        
    }
    
    void pop() {

        if( mini > st.top() ){

            mini = 2*mini - st.top();
            st.pop();

        }

        else{
            st.pop();
        }
        
    }
    
    int top() {

        if( st.top() < mini ){
            return mini;
        }

        return st.top();
        
    }
    
    int getMin() {
        
        return mini;
    }
};

//---------------------------------------------------------------------------------------------------------------------------------------
