// @leetcode : Largest Rectangle in Histogram

//----------------------------------------------------------NAIVE---------------------------------------------------------------------

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        
        int n = heights.size();
        int maxArea = 0;

        for(int i=0; i<n; i++){

            int left = 0, right = 0;

            // checks LHS bar, if they form rectangle
            for(int l = i-1; l>=0; l--){
                if(heights[l] >= heights[i])            left++;
                else                                    break;
            }
            
            // checks RHS bar , if they form rectangle
            for(int r=i+1; r<n; r++){
                if(heights[r] >= heights[i] )           right++;
                else                                    break;
            }

            int currArea = (left+right+1)*heights[i];
            maxArea = max( maxArea, currArea );

        }

        return maxArea;

    }
};

//------------------------------------------------------------BETTER SOLUTION-----------------------------------------------------------

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {

        int n = heights.size();
        int leftSmall[n];
        int rightSmall[n];
        stack<int> st;

        for(int i=0; i<n; i++){

            while(!st.empty() && heights[st.top()] >= heights[i] ){
                st.pop();
            }

            if(!st.empty())                 leftSmall[i] = st.top() + 1;
            else                            leftSmall[i] = 0;

            st.push(i);
        }

        // clearing the stack, to be reused again
        while(!st.empty())
            st.pop();
        
        for(int i=n-1; i>=0; i--){

            while(!st.empty() && heights[st.top()] >= heights[i] ){
                st.pop();
            }

            if(!st.empty())                 rightSmall[i] = st.top() - 1;
            else                            rightSmall[i] = n-1;

            st.push(i);
        }

        int maxArea = 0;
        for(int i=0; i<n; i++){
            maxArea = max( maxArea, (rightSmall[i]-leftSmall[i] + 1)*heights[i] );
        }

        return maxArea;

    }
};

//--------------------------------------------------------------OPTIMAL-------------------------------------------------------------



//----------------------------------------------------------------------------------------------------------------------------------


