// @gfg : Number of Distinct Islands

//------------------------------------------------------------------------------------------------------------------------------------

class Solution {
  public:
    void bfs( int i, int j, vector<vector<int>> &grid, vector<vector<int>> &vis, 
              vector<pair<int,int>> &temp){

        int n = grid.size();
        int m = grid[0].size();
        
        int row0 = i;
        int col0 = j;
        
        queue<pair<int,int>> q;
        q.push({i,j});
        vis[i][j] = 1;

        int drow[4] = {-1,0,1,0};
        int dcol[4] = {0,1,0,-1};

        while(!q.empty()){

            int r = q.front().first;
            int c = q.front().second;
            q.pop();
            
            for(int i=0; i<4; i++){

                int nrow = r + drow[i];
                int ncol = c + dcol[i];

                if( nrow>=0 && nrow<n && ncol>=0 && ncol <m && grid[nrow][ncol]==1
                    && vis[nrow][ncol]==0){

                        q.push({nrow,ncol});
                        temp.push_back({nrow-row0, ncol-col0});
                        vis[nrow][ncol] = 1;
                        
                    }
           
            }
        }

    }
    
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<int>> vis(n, vector<int>(m,0));
        set<vector<pair<int,int>>> s;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){

                if(grid[i][j]==1 && vis[i][j]==0){
                    vector<pair<int,int>> temp;
                    bfs(i,j,grid,vis,temp);
                    s.insert(temp);
                }
                    
            }
        }
        
        return s.size();
        
    }
};

//------------------------------------------------------------------------------------------------------------------------------------
