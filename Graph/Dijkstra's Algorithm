// gfg : Implementing Dijkstra Algorithm

//-------------------------------------------------------Using Priority Queue--------------------------------------------------------

class Solution
{
	public:
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        //min heap
        priority_queue< pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > pq;
        pq.push({0,S});
        // {distance, node}
        
        vector<int> dist(V,1e9);
        dist[S] = 0;
        
        while( !pq.empty() ){
            
            int node = pq.top().second;
            int dis = pq.top().first;
            
            pq.pop();
            
            for(auto it: adj[node]){
                
                int v  = it[0];
                int wt = it[1];
                
                // relaxation
                if( dis + wt < dist[v]){
                    dist[v] = wt + dis;
                    pq.push({dist[v], v});
                }    
                
            }
            
        }
        
        return dist;
        
    }
};

//-----------------------------------------------------------------------------------------------------------------------------------
