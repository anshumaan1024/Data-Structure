// @leetcode : Number of Provinces

//---------------------------------------------------------METHOD 1-----------------------------------------------------------------------
// using dfs call

class Solution {
public:
    void dfs(int node,vector<int> &vis, vector<vector<int>>& isConnected){

        vis[node] = 1;
        for(int i=0; i<isConnected.size(); i++){
            if(isConnected[node][i]==1 && vis[i]!=1){
                dfs(i,vis,isConnected);
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {

        int V = isConnected.size();
        vector<int> vis(V,0);

        int count = 0;
        for(int i=0; i<V; i++){
            if(vis[i]!=1){
                count++;
                dfs(i,vis,isConnected);
            }
        }

        return count;
        
    }
};

//---------------------------------------------------------METHOD 2-----------------------------------------------------------------------
// using union set

class Solution {
public:
    class disjointSet{
    public:
            vector<int> rank,parent;

            disjointSet(int n){
                rank.resize(n+1,0);
                parent.resize(n+1);

                for(int i=0; i<=n; i++)
                    parent[i] = i;
            }

        int findUPar(int node){
            if(parent[node]==node)
                return node;
            parent[node] = findUPar(parent[node]);

            return parent[node];
        }

        void unionByRank(int u, int v){
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);

            if(ulp_u==ulp_v)        return;

            if(rank[ulp_u] < rank[ulp_v])
                parent[ulp_u] = ulp_v;
            else if( rank[ulp_u] > rank[ulp_v])
                parent[ulp_v] = ulp_u;
            else{
                parent[ulp_u] = ulp_v;
                rank[ulp_v]++;
            }
        }  

    };
public:
    int findCircleNum(vector<vector<int>>& isConnected) {

        int V = isConnected.size();

        disjointSet ds(V);

        for(int i=0; i<V; i++){
            for(int j=0; j<V; j++){
                if(isConnected[i][j]==1)
                    ds.unionByRank(i,j);
            }
        }

        int count = 0;
        for(int i=0;i<V;i++){
            if(ds.parent[i]==i)   
                count++;
        }

        return count;
        
    }
};

//----------------------------------------------------------------------------------------------------------------------------------------
