// @gfg : Accounts Merge

//----------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    class disjointSet{
        public:
            vector<int> rank,parent;
        disjointSet(int n){
            rank.resize(n+1,0);
            parent.resize(n+1);

            for(int i=0;i<=n;i++)
                parent[i] = i;
        }

        int findUPar(int node){
            if(parent[node]==node)
                return node;
            parent[node] = findUPar(parent[node]);

            return parent[node];
        }

        void unionByRank(int u, int v){
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);

            if(ulp_u==ulp_v)        return;

            if(rank[ulp_u] < rank[ulp_v])
                parent[ulp_u] = ulp_v;
            else if( rank[ulp_u] > rank[ulp_v])
                parent[ulp_v] = ulp_u;
            else{
                parent[ulp_u] = ulp_v;
                rank[ulp_v]++;
            }
        }
    
    };

public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {

        int n = accounts.size();
        disjointSet ds(n);

        unordered_map<string,int> mailNode;

        for(int i=0;i<n;i++){
            for(int j=1;j<accounts[i].size(); j++){

                string mail = accounts[i][j];
                if(mailNode.find(mail)==mailNode.end()){
                    mailNode[mail] = i;
                }
                else{
                    ds.unionByRank(i,mailNode[mail]);
                }
            }
    
        }

        vector<string> mergedMail[n];
        for(auto it:mailNode){
            string mail = it.first;
            int name = it.second;

            int ulp = ds.findUPar(name);

            mergedMail[ulp].push_back(mail);
        }

        vector<vector<string>> ans;

        for(int i=0; i<n; i++){
            if(mergedMail[i].size()==0)       continue;

            sort(mergedMail[i].begin(),mergedMail[i].end());

            vector<string> temp;
            temp.push_back(accounts[i][0]);

            for(auto it: mergedMail[i]){
                temp.push_back(it);
            }

            ans.push_back(temp);
            
        }

        return ans; 
        
    }
};

//----------------------------------------------------------------------------------------------------------------------------------------
