// @gfg : Strongly Connected Components (Kosaraju's Algo)

//-------------------------------------------------------------------------------------------------------------------------------------

class Solution
{
    public:
    void dfs(int node, vector<int> &vis, vector<vector<int>> &adj, stack<int> &st){
        
        vis[node] = 1;
        for(auto it: adj[node]){
            if(!vis[it]) 
                dfs(it,vis,adj,st);
        }
        
        st.push(node);
        
    }
    
    public:
    void dfs3(int node, vector<int> &vis, vector<int> adjT[] ){
        
        vis[node] = 1;
        for(auto it: adjT[node] ){
            if(!vis[it]) 
                dfs3(it,vis,adjT);
        }
        
    }
    
	public:
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        vector<int> vis(V,0);
        stack<int> st;
        
        // sorting edges according to finishing time
        // V + E
        for(int i=0; i<V; i++){
            if(!vis[i])
                dfs(i,vis,adj,st);
        }
        
        vector<int> adjT[V];
        
        // reversing the graph
        // V + E
        for(int i=0; i<V; i++){
            
            vis[i] = 0;
            for(auto it: adj[i]){
                // before : i->it
                // now : it->i
                adjT[it].push_back(i);
            }
            
        }
        
        int scc = 0;
        // dfs in each scc
        // V + E
        while(!st.empty()){
            
            int node = st.top();
            st.pop();
            
            if(!vis[node]){
                scc++;
                dfs3(node,vis,adjT);
            }
        
        }
        
        return scc;
        
    }
};

//-------------------------------------------------------------------------------------------------------------------------------------
