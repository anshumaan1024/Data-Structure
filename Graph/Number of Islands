// @leetcode : Number of Islands

//------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    void bfs( int i, int j, vector<vector<char>> &grid, vector<vector<int>> &vis){

        int m = grid.size();
        int n = grid[0].size();

        queue<pair<int,int>> q;
        q.push({i,j});
        vis[i][j] = 1;

        int drow[4] = {-1,0,1,0};
        int dcol[4] = {0,1,0,-1};

        while(!q.empty()){

            int r = q.front().first;
            int c = q.front().second;
            q.pop();


            for(int i=0; i<4; i++){

                int nrow = r + drow[i];
                int ncol = c + dcol[i];

                if( nrow>=0 && nrow<m && ncol>=0 && ncol <n && grid[nrow][ncol]=='1'
                    && vis[nrow][ncol]==0){

                        q.push({nrow,ncol});
                        vis[nrow][ncol] = 1;
                    }
           
            }
        }

    }

public:
    int numIslands(vector<vector<char>>& grid) {

        int m = grid.size();
        int n = grid[0].size();

        vector<vector<int>> vis(m, vector<int>(n,0));
        int count = 0;

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){

                if(grid[i][j]=='1' && vis[i][j]==0){
                    bfs(i,j,grid,vis);
                    count++;
                }
                    
            }
        }
        
        return count;
    }
};

//------------------------------------------------------------------------------------------------------------------------------------
