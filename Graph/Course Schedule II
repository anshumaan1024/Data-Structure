// @leetcode : Course Schedule II

//--------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        
        int n = numCourses;

        vector<int> adj[n];
	    for(auto it: prerequisites){
	        adj[it[1]].push_back(it[0]);
	    }
	    
	    
	    int indegree[n];
        for(int i=0; i<n; i++) 
            indegree[i] = {0};
	    
	    for(int i=0; i<n; i++){
	        
	        for(auto it: adj[i])
	            indegree[it]++;
	    }
	    
        // stores topological ordering
	    vector<int> ans;
	    queue<int> q;
	    
	    // In, DAG there will exist at least one vertix with indegree = 0
	    for(int i=0; i<n; i++){
	        if(indegree[i]==0)
	            q.push(i);
	    }
	    
	    while(!q.empty()){
	        
	        int node = q.front();
	        q.pop();
	        
	        ans.push_back(node);
	        
	        for(auto it : adj[node] ){
	      
	            indegree[it]--;
	            if(indegree[it] == 0)
	                q.push(it);
	                
	        }
	    }
	    
	    if(ans.size()==n)           return ans;
	    
	    return {};
    }
};

//--------------------------------------------------------------------------------------------------------------------------------------
