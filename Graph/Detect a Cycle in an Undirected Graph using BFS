// @gfg : Detect cycle in an undirected graph

//---------------------------------------------------------------------------------------------------------------------------------------

class Solution {
  public:
    bool detect( int source, int vis[], vector<int> adj[]){
        
        queue<pair<int,int>> q;
        q.push({source,-1});
        vis[source] = 1;
        
        while(!q.empty()){
            
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            
            for(auto it : adj[node] ){
                    
                if(!vis[it]){
                    q.push({it,node});
                    vis[it] = 1;
                }
                
                else if( it!= parent)
                    return true;
                
            }
        }
        
        return false;
        
    }
    
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        
        int vis[V] = {0};
        
        for(int i=0; i<V; i++){
            
            if(!vis[i]){
                if(detect(i,vis,adj))
                    return true;
            }
        }
        
        return false;
       
    }
};

//---------------------------------------------------------------------------------------------------------------------------------------
