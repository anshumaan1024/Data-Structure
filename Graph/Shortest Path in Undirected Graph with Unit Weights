// @gfg : Shortest path in Undirected Graph having unit distance

//---------------------------------------------------------------------------------------------------------------------------------------

class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        
        // creating adj. list
        vector<int> adj[N];
        for(int i=0; i<M; i++){
            
            int u = edges[i][0];
            int v = edges[i][1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        queue<int> q;
        q.push(src);
        
        vector<int> dist(N,1e9);
        dist[src] = 0;
        
        while(!q.empty()){
            
            int node = q.front();
            q.pop();

            for(auto it : adj[node]){
                
                // relaxation
                if(  dist[node] + 1 < dist[it]  ){
                    dist[it] = 1 + dist[node];
                    q.push(it);
                }
                
            }
        }
        
        for(int i=0; i<N; i++)
            if(dist[i]==1e9)                    dist[i] = -1;
        
        return dist;
        
    }
};

//---------------------------------------------------------------------------------------------------------------------------------------
