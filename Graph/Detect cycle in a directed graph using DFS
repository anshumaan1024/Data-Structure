// @gfg : Detect cycle in a directed graph 

//------------------------------------------------------------------------------------------------------------------------------------

class Solution {
  public:
    bool dfs(int node, vector<int> adj[], int vis[]){
        
        vis[node] = 2;
        // traverse for adjacent nodes
        for(auto it : adj[node]){
            
            // if not has not been visited
            if(vis[it] == 0){
                if( dfs(it,adj,vis)== true)
                    return true;
            }
            
            // if not has been both,visited and pathvisited 
            else if( vis[it]==2 )
                return true;
        }
        
        // backtrack to visited
        vis[node] = 1;
        
        return false;
        
    }
    
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        
        int vis[V] = {0};

        for(int i=0; i<V; i++){
            if(!vis[i]){
                if( dfs(i,adj,vis)==true)
                    return true;
            }
        }
        
        return false;
        
    }
};

//------------------------------------------------------------------------------------------------------------------------------------
