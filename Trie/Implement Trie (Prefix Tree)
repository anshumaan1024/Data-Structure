// @leetcode : Implement Trie (Prefix Tree)

//------------------------------------------------------------------------------------------------------------------------------------

class TrieNode{
	
	public:
	
		char data;
		TrieNode* children[26];
		bool isTerminal;
		
		// constructor
		TrieNode( char ch ){
			
			data = ch;
			
			for(int i=0; i<26; i++)
				children[i] = NULL;
			
			isTerminal = false;
		}
	
};

class Trie {
public:

    TrieNode* root;

    Trie() {
        root = new TrieNode('\0');
    }

    void insertHelper( TrieNode* root, string word ){
			
			// base case
			if(word.size()==0){
				root->isTerminal = true;
				return;
			}
			
			// assumption, word will be in small caps
			int index = word[0] - 'a';
			TrieNode* child;
			
			// present
			if( root->children[index]!= NULL)
				child = root->children[index];
			
			// absent
			else{
				child = new TrieNode(word[0]);
				root->children[index] = child;
			}
			
			// RECURSION
			insertHelper(child,word.substr(1));
			
		}
    
    void insert(string word) {
        insertHelper(root,word);
    }
    
    bool searchHelper( TrieNode* root, string word){
			
			// base case
			if( word.size()== 0)				
				return root->isTerminal;
			
			int index = word[0]- 'a';
			TrieNode* child;
			
			// present
			if( root->children[index]!= NULL)
				child = root->children[index];
			
			// not present
			else
				return false;
			
			// RECURSION
			return searchHelper( child, word.substr(1) );
			
		}

    bool search(string word) {
        return searchHelper(root,word);
    }

    bool prefixHelper( TrieNode* root, string prefix){
			
			// base case
			if( prefix.size()== 0)				
				return true; 
			
			int index = prefix[0]- 'a';
			TrieNode* child;
			
			// present
			if( root->children[index]!= NULL)
				child = root->children[index];
			
			// not present
			else
				return false;
			
			// RECURSION
			return prefixHelper( child, prefix.substr(1) );
			
		}

    
    bool startsWith(string prefix) {
				// similar to search, if prefix is fully traversed return true;
        return prefixHelper(root,prefix);
    }

};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

//------------------------------------------------------------------------------------------------------------------------------------
