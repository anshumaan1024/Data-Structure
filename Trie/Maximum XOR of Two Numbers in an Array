// @leetcode : Maximum XOR of Two Numbers in an Array

//-------------------------------------------------------------------------------------------------------------------------------------

class TrieNode{
public:
    TrieNode* child[2];

    TrieNode(){
        child[0] = NULL;
        child[1] = NULL;
    }
};

class Trie{
public:
    TrieNode* root;

    Trie(){
        root = new TrieNode();
    }

    void insertHelper( TrieNode* root, int num ){

        TrieNode* curr = root;
        for(int i=31; i>=0; i--){
            int bit = ((num>>i) & 1);

            if( curr->child[bit] == NULL)
                curr->child[bit] = new TrieNode(); 

            curr = curr->child[bit]; 
        }
    }

    void insert( int num){
        insertHelper(root,num);
    }

    int getMaxHelper( TrieNode* root, int num){

        int maxNum = 0;
        for(int i=31; i>=0; i--){

            int bit = (( num>>i ) & 1);;

            if( root->child[1-bit] != NULL ){
                maxNum = maxNum | (1<<i);
                root = root->child[1-bit];
            }
            else{
                root = root->child[bit];
            }

        }

        return maxNum;

    }


    int getMax( int num){
        return getMaxHelper(root,num);
    }

};

class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {

        Trie* t = new Trie();

        int n = nums.size();
        for(int i=0; i<n; i++){
            t->insert(nums[i]);
        }

        int maxi = 0;
        for(int i=0; i<n; i++){
            int x = nums[i];
            maxi = max( maxi, t->getMax(x) );
        }        

        return maxi;
        
    }
};

//-------------------------------------------------------------------------------------------------------------------------------------
