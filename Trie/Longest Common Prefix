// @leetcode : Longest Common Prefix

//------------------------------------------------------------NAIVE APPROACH-------------------------------------------------------------
// without trie

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {

        int n = strs.size();
        if(n==1)                    return strs[0];
        
        string ans;
        string str = strs[0];

        // for traversing all characters of first string
        for( int i=0; i< str.size() ; i++){

            char ch = str[i];
            bool match = true;
            
            // for comparing ch with rest of the strings
            for(int j=1; j< n; j++){

                if( i > strs[j].size() || ch!= strs[j][i] ){
                    match = false;
                    break;
                }   
            }

            if( match == false )
                break;
            
            ans.push_back(ch);

        }

        return ans;

    }
};

//-------------------------------------------------------------OPTIMAL---------------------------------------------------------------

class TrieNode{

public:
    char data;
    TrieNode* child[26];
    bool isTerminal;
    int childCount;

    TrieNode( char ch){

        data = ch;
        for(int i=0; i<26; i++)
            child[i] = NULL;

        isTerminal = false;
        childCount = 0;
    }

};

class Trie{

    public:
        TrieNode* root;

        Trie( char ch ){
            root = new TrieNode(ch);
        }

    void insertHelper( TrieNode* root, string word ){
			
      TrieNode* curr = root;
      for(int i=0; i< word.size(); i++){

          int index = word[i] - 'a';
          // not present, create TrieNode
          if( curr->child[index] == NULL ){
              curr->child[index] = new TrieNode( word[i] );
              curr->childCount++;
          }
                
		  // keep traversing 
          curr = curr->child[index];

      }

      curr->isTerminal = true;
			
	}
    
    void insert(string word) {
        insertHelper(root,word);
    }


    void lcp( string first, string &ans ){
		
        TrieNode* curr = root;
        for(int i=0; i< first.size(); i++){

            char ch =  first[i];

            if( curr->childCount==1 ){
                ans.push_back(ch);

                int index = ch - 'a';
                curr = curr->child[index];
            }

            else{
                break;
            }

            if( curr->isTerminal )
                break;
        }
			
	}
    
};

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {

        Trie* t = new Trie('\0');

        int n = strs.size();
        for(int i=0; i<n; i++){
            
            t->insert(strs[i]);

                if(strs[i]== "")
                    return "";
        }

        string first = strs[0];
        string ans = "";

        t->lcp(first,ans);

        return ans;
        
    }
};

//----------------------------------------------------------------------------------------------------------------------------------



