// @leetcode: Sliding Window Maximum

//-------------------------------------------------------------NAIVE-------------------------------------------------------------------

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {

        int n = nums.size();
        vector<int> ans;
        for(int i=0; i<=n-k; i++){

            int maxx = nums[i];
            for(int j=i; j<i+k; j++){
                maxx = max( maxx, nums[j]);
            }

            ans.push_back(maxx);
        }

        return ans;
        
    }
};

//-----------------------------------------------------------BETTER APPROACH------------------------------------------------------------
// using deque

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {

        int n = nums.size();
        vector<int> ans;
        deque<int> dq;

        for(int i=0; i<n; i++){

            // removing out of bound elements, if any
            if( !dq.empty() && dq.front()== i-k)
                dq.pop_front();

            // maintaining the decreasing order in deque
            while(!dq.empty() && nums[dq.back()] <= nums[i] ){
                dq.pop_back();
            }

            dq.push_back(i);

            if(i>=k-1)
                ans.push_back(nums[dq.front()]);

        }

        return ans;
        
    }
};

//---------------------------------------------------------------------------------------------------------------------------------
