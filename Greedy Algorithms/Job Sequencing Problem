// Job Sequencing Problem

//----------------------------------------------------------------CODE-----------------------------------------------------------------

struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    
    static bool myComp( Job a, Job b){
        
        return a.profit > b.profit;
    }
    
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,myComp);
        
        // finding maximum  deadline
        int maxi = INT_MIN;
        for(int i=0; i<n; i++)
            maxi = max( maxi, arr[i].dead );
        
        // use for printing job sequence, if required
        vector<int> slot( maxi+1,-1);
        
        int countJob = 0;
        int jobProfit = 0;
        
        for(int i=0; i<n; i++){
                
            for(int j= arr[i].dead ; j>=1; j--){
                
                // take deadline as late as possible
                if( slot[j] ==-1){
                    slot[j] = arr[i].id;
                    countJob++;
                    jobProfit += arr[i].profit;
                    break;
                }
                
            }    
                 
        }
            
        vector<int> ans(2);
        ans[0] = countJob;
        ans[1] = jobProfit;
        
        return ans;
        
    } 
};

//---------------------------------------------------------------------------------------------------------------------------------------
