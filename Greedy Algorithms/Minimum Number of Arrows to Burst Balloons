// @leetcode : Minimum Number of Arrows to Burst Balloons
// similar to activity selection problem

//------------------------------------------------------------ALGO-----------------------------------------------------------------

class Solution {
static bool myComp(vector<int> &a, vector<int> &b){
        return a[1] < b[1];

}
public:
    int findMinArrowShots(vector<vector<int>>& points) {

        int n = points.size();

        // sort in ascending , according to Xend
        sort( points.begin(), points.end(), myComp );
        
        // stores first previous balloon, which overlaps
        int prev = 0;   

        int arrow = 1;
        for(int i=1; i<n; i++){

            // if previous balloon, doesn't overlap
            if( points[i][0] > points[prev][1]){
                arrow++;
                prev = i;
            }

        }

        return arrow;
        
    }
};

//---------------------------------------------------------------------------------------------------------------------------------
