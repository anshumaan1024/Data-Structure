// @leetcode : Single Number II

//--------------------------------------------------------------METHOD-1--------------------------------------------------------------
// using hashmap

//--------------------------------------------------------------METHOD-2---------------------------------------------------------------
// using sorting

class Solution {
public:
    int singleNumber(vector<int>& nums) {

        int n = nums.size();
        if(n==1)            return nums[0];

        sort(nums.begin(), nums.end());

        if(nums[n-1]!=nums[n-2])
            return nums[n-1];

        int ans = -1;

        for(int i=1; i<n ; i=i+3){

            if(nums[i-1]==nums[i] && nums[i]==nums[i+1])
                continue;
            
            else{
                ans = nums[i-1];
                break;
            }
                
        }

        return ans;

    }
};

//-----------------------------------------------------------------METHOD-3------------------------------------------------------------
// using bit-manipulation

class Solution {
public:
    int singleNumber(vector<int>& nums) {

        int n = nums.size();
        int ans = 0;
        for(int bit=0; bit<32 ; bit++){

            int mask = 1<<bit;
            int count = 0;

            for(int i=0; i<n; i++ ){
                if(mask&nums[i])        count++;
            }

            if(count%3!=0)              ans = ans|mask;
            
        }

        return ans;
        
    }
};

//-------------------------------------------------------------METHOD-4 [OPTIMAL]----------------------------------------------------



//------------------------------------------------------------------------------------------------------------------------------------
