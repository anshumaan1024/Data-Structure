// @leetcode : 4Sum

//-------------------------------------------------------------NAIVE------------------------------------------------------------------

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        int n = nums.size();
        set<vector<int>> s;
        for(int i=0; i<n; i++){
            for(int j = i+1; j<n; j++){
                for(int k= j+1; k<n; k++ ){                    
                    for(int l= k+1; l<n; l++){

                        // prevents overflow
                        long long sum = nums[i] + nums[j];
                        sum += nums[k];
                        sum += nums[l];

                        if( sum == target){
                            
                            vector<int> temp;
                            temp.push_back(nums[i]);
                            temp.push_back(nums[j]);
                            temp.push_back(nums[k]);
                            temp.push_back(nums[l]);

                            sort(temp.begin(), temp.end());
                            s.insert(temp);
                        }

                    }
                }
            }
        }

        vector<vector<int>> ans(s.begin(), s.end());
        return ans;

    }
};

//-------------------------------------------------------------METHOD 2----------------------------------------------------------------

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        int n = nums.size();
        set<vector<int>> s;

        for(int i=0; i<n; i++){
            for(int j = i+1; j<n; j++){
                // take bigger data type, because fourth may overflow
                unordered_set<long long> hashset;
                for(int k= j+1; k<n; k++ ){

                    long long sum = nums[i] + nums[j];
                    sum += nums[k];
                    
                    long long fourth = target - sum;
                    // if fourth exists in hashset
                    if( hashset.find(fourth)!= hashset.end() ){
                        vector<int> temp = {nums[i],nums[j],nums[k],(int)fourth};
                        sort(temp.begin(),temp.end() );
                        s.insert(temp);
                    }   

                    hashset.insert(nums[k]);

                }
            }
        }

        vector<vector<int>> ans( s.begin(), s.end());
        return ans;

    }
};

//-------------------------------------------------------------OPTIMAL-----------------------------------------------------------------



//-------------------------------------------------------------------------------------------------------------------------------------

