// @leetcode : 3Sum

//----------------------------------------------------------EXTREME--NAIVE-------------------------------------------------------------
//using 3 for loop

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {

        int n = nums.size();
        set<vector<int>> st;

        for(int i=0; i<n; i++){
            for(int j = i+1; j<n; j++){
                for(int k= j+1; k<n; k++){

                    if(nums[i] + nums[j] + nums[k] == 0 ){

                        vector<int> temp;
                        temp.push_back(nums[i]);
                        temp.push_back(nums[j]);
                        temp.push_back(nums[k]);

                        sort(temp.begin(), temp.end());

                        st.insert(temp);
                    }
                }
            }
        }

        vector<vector<int>> ans( st.begin(), st.end() );

        return ans;        
    }
};

//-------------------------------------------------------------NAIVE---------------------------------------------------------------

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {

        int n = nums.size();
        set<vector<int>> st;

        for(int i=0; i<n; i++){

            unordered_set<int> s;
            for(int j = i+1; j<n; j++){

                int third = - (nums[i] + nums[j]);
                // if found in set
                if( s.find(third)!=s.end() ){
                    vector<int> temp = {nums[i], nums[j], third} ;
                    sort( temp.begin(), temp.end());
                    st.insert(temp);
                }

                s.insert(nums[j]);

            }
        }

        vector<vector<int>> ans( st.begin(), st.end());
        return ans;
    }
               
};

//-------------------------------------------------------------OPTIMAL---------------------------------------------------------------

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums){

        int n = nums.size();
        sort(nums.begin(), nums.end());

        vector<vector<int>> ans;

        for(int i=0; i<n; i++){

            if( i>0 && nums[i]==nums[i-1])              continue;

            int target = 0-nums[i];
            int j = i + 1;
            int k = n - 1;
            while( j<k ){

                if( nums[j] + nums[k] < target)             j++;

                else if( nums[j] + nums[k] > target )       k--;
                
                else if(nums[j] + nums[k] == target){

                    ans.push_back( {nums[i], nums[j], nums[k]} );

                    j++;
                    k--;

                    while(j<k && nums[j] == nums[j-1])      j++;
                    while(j<k && nums[k] == nums[k+1])      k--;

                }

            }
                         
        }

        return ans;
        
    }
};

//---------------------------------------------------------------------------------------------------------------------------------
