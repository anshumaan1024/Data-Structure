// @leetcode : Lowest Common Ancestor of a Binary Tree
//
//--------------------------------------------------------------------METHOD 1 (NAIVE)----------------------------------------------------------------------------

class Solution {
public:
    bool path(TreeNode* root, TreeNode* x, vector<TreeNode*> &ans){

        if(root==NULL)          return false;
       
        ans.push_back(root);
        if(root==x)             return true;

        if( path(root->left,x,ans) || path(root->right,x,ans) )
            return true;

        ans.pop_back();
        return false;
    }

public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {

        vector<TreeNode*> pPath, qPath;
        path(root,p,pPath);
        path(root,q,qPath);

        TreeNode* ans = NULL;
        int size = min(pPath.size(), qPath.size());

        for(int i=0; i<size ; i++){
            if( pPath[i]==qPath[i])
                ans = pPath[i];     
        }

        return ans;
    }
};

//--------------------------------------------------------------------METHOD 2 (OPTIMAL)-------------------------------------------------------------------------

class Solution {
public:
    TreeNode* f(TreeNode* root, TreeNode* p, TreeNode* q){

        if(root==NULL || root==p || root==q)      return root;
        
        TreeNode* left = f(root->left,p,q);
        TreeNode* right = f(root->right,p,q);

        if(left==NULL)              
            return right;

        else if( right==NULL)       
            return left;
        
        else // both left and right are not NULL, we found our LWA
            return root;

    }

public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {

        return f(root,p,q);      
    }
};

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
