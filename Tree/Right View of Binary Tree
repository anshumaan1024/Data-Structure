// @leetcode : Binary Tree Right Side View

//---------------------------------------------------------------------MEHTOD 1 (NAIVE)----------------------------------------------------------------------

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {

        vector<int> ans;
        if(root==NULL)                  return ans;

        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){

            int size = q.size();
            for(int i=0; i<size ; i++){

                TreeNode* node = q.front();
                q.pop();

                if(i==0)        ans.push_back(node->val);

                if(node->right!=NULL)           q.push(node->right);
                if(node->left!=NULL)            q.push(node->left);

            }
        }

        return ans;
 
    }
};

//-------------------------------------------------------------------METHOD 2 (OPTIMAL)---------------------------------------------------------------------

class Solution {
public:
    void rightSideViewHelper(TreeNode* root, int level, vector<int> &ans ){

        if(root==NULL)                  return;

        if( level==ans.size() )     ans.push_back(root->val);

        rightSideViewHelper(root->right,level+1,ans);
        rightSideViewHelper(root->left,level+1,ans);
    }
    
public:
    vector<int> rightSideView(TreeNode* root) {

        vector<int> ans;
        rightSideViewHelper(root,0,ans);

        return ans;
        
    }
};

//----------------------------------------------------------------------------------------------------------------------------------------------------------
