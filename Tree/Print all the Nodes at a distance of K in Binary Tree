// @leetcode : All Nodes Distance K in Binary Tree

//--------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    void childToParentMapping(TreeNode* root, unordered_map<TreeNode*, TreeNode*> &m){

        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){

            int size = q.size();
            for(int i=0; i<size; i++){
                    
                TreeNode*  node = q.front();
                q.pop();

                if(node->left!=NULL){
                    q.push(node->left);
                    m[node->left] = node;
                }

                if(node->right!=NULL){
                    q.push(node->right);
                    m[node->right] = node;
                }
            
            }
        }

    }

public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {

        unordered_map<TreeNode*,TreeNode*> m;
        // maps child to parent
        childToParentMapping(root,m);

        queue<pair<TreeNode*,int>> q;
        q.push({target,0});
        unordered_set<TreeNode*> vis;
        vector<int> ans;

        // 2nd queue, to travel kth distance from target node
        while(!q.empty()){
        
            int size = q.size();
            for(int i=0; i<size; i++){
                
                TreeNode* node = q.front().first;
                int dist = q.front().second;
                vis.insert(node);
                q.pop();

                if(dist==k) 
                    ans.push_back(node->val);

                // leftward
                if( node->left!=NULL && vis.find(node->left) == vis.end() ){
                    q.push({node->left, dist + 1});
                    vis.insert(node->left);
                }

                // rightward
                if(  node->right!=NULL && vis.find(node->right) == vis.end()  ){
                    q.push({node->right, dist + 1});
                    vis.insert(node->right);
                }

                // upward
                if( m.count(node) && vis.find(m[node]) == vis.end() ){
                    q.push({m[node], dist + 1});
                    vis.insert(m[node]);
                }

            }
        }

        return ans;
        
    }
};

//--------------------------------------------------------------------------------------------------------------------------------------------------
