// @leetcode : Search a 2D Matrix

//----------------------------------------------------------------NAIVE-----------------------------------------------------------------

class Solution {
bool binarySearch(int i, int target, vector<vector<int>>& matrix ){

    int col = matrix[0].size();
    int low = 0;
    int high  = col-1;

    while(low<=high){

        int mid = (low+high)/2;
        if(matrix[i][mid]==target)
            return true;
        else if( matrix[i][mid] > target )
            high = mid-1;
        else
            low = mid+1;
    }

    return false;

}
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {

        int row = matrix.size();
        int col = matrix[0].size();

        for(int i=0;i<row; i++){
            if( matrix[i][0] <= target && target<=matrix[i][col-1]  ){
                return binarySearch(i,target,matrix);
            }
        }

        return false;
        
    }
};

//----------------------------------------------------------------OPTIMAL---------------------------------------------------------------

class Solution {
bool binarySearch(int target, vector<vector<int>>& matrix ){

    int m = matrix.size();
    int n = matrix[0].size();
    int low = 0;
    int high  = m*n-1;

    while(low<=high){

        int mid = (low+high)/2;
        int row = mid/n;
        int col = mid%n;

        if(matrix[row][col]==target)
            return true;
        else if( matrix[row][col] > target )
            high = mid-1;
        else
            low = mid+1;
    }

    return false;
}

public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        return binarySearch(target,matrix);          
    }
};

//----------------------------------------------------------------------------------------------------------------------------------------
