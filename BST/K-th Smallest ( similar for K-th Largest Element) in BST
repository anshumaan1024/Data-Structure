// @leetcode : Kth Smallest Element in a BST

//-----------------------------------------------------------------METHOD -1 (NAIVE)---------------------------------------------------------------
// stores all nodes in vector, and sort them to get required element

//-----------------------------------------------------------------METHOD - 2----------------------------------------------------------------------
// inorder DFS with counter

class Solution {
public:
    void f(TreeNode* root, int &count, int k, int &ans){

        if(root==NULL)      return;

        f(root->left,count,k,ans);

        count++;
        if(count==k)
            ans = root->val;

        f(root->right,count,k,ans);

    }

public:
    int kthSmallest(TreeNode* root, int k) {

        int ans ;
        int count = 0;
        f(root,count,k,ans);

        return ans;
        
    }
};

//-----------------------------------------------------------------METHOD 3 (OPTIMAL)--------------------------------------------------------------
// using morris traversal + Inorder traversal

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {

        int ans;
        int count = 0;
        TreeNode* curr = root;
        while(curr!=NULL){

            if(curr->left!=NULL){

                // going right most node on left subtree
                TreeNode* temp2 = curr->left;
                while(temp2->right!=NULL && temp2->right!=curr){
                    temp2 = temp2->right;
                }

                // breaking the thread, and going right
                if(temp2->right==curr){

                    temp2->right = NULL;

                    count++;
                    if(count == k)
                        ans = curr->val;

                    curr = curr->right;
                }

                // making threads
                else{
                    temp2->right =  curr;
                    curr = curr->left;
                }

            
            }

            else{
                count++;
                if(count == k)
                    ans = curr->val;                
                     
                curr = curr->right;
            }

        }

        return ans;
        
    }
};

//-------------------------------------------------------------------------------------------------------------------------------------------------
